load("@rules_cc//cc:defs.bzl", "cc_import")
load("//:defs.bzl", "proto_plugin")

proto_plugin(
    name = "rust_plugin",
    exclusions = [
        "google/protobuf",
    ],
    # Use the proto basename and pipe the value to the rust_keyword function.
    # Ths function will append '_pb' if the basename is a rust keyword.
    outputs = ["{basename|rust_keyword}.rs"],
    tool = "//rust/raze:cargo_bin_protoc_gen_rust",
    visibility = ["//visibility:public"],
)

proto_plugin(
    name = "grpc_rust_plugin",
    empty_template = "empty.template",
    exclusions = [
        "google/protobuf",
    ],
    # Use the proto basename and pipe the value to the rust_keyword function.
    # Ths function will append '_pb' if the basename is a rust keyword.
    outputs = ["{basename|rust_keyword}_grpc.rs"],
    tool = "//rust/raze:cargo_bin_grpc_rust_plugin",
    visibility = ["//visibility:public"],
)

# Bodge to fix missing missing descriptors
# Trying to use @upb//:descriptor_upb_proto directly does not work, but renaming to remove the 'upb.a' extenstion does
# work
genrule(
    name = "copy_upb_libdescriptor_proto",
    srcs = ["@upb//:descriptor_upb_proto"],
    outs = ["libdescriptor_proto.a"],
    cmd = "cp $(locations @upb//:descriptor_upb_proto) \"$(@D)\" && mv \"$(@D)/libdescriptor_proto.upb.a\" \"$(@D)/libdescriptor_proto.a\"",
)

cc_import(
    name = "upb_libdescriptor_proto",
    static_library = ":copy_upb_libdescriptor_proto",
    visibility = ["//visibility:public"],
)
