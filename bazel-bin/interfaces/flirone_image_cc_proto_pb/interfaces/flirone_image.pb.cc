// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interfaces/flirone_image.proto

#include "interfaces/flirone_image.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr FlirOneImage::FlirOneImage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , machine_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rgb_image_(nullptr)
  , thermal_image_(nullptr)
  , measured_timestamp_ns_(PROTOBUF_LONGLONG(0))
  , sent_timestamp_ns_(PROTOBUF_LONGLONG(0))
  , camera_sequence_(0u)
  , msg_sequence_(0u){}
struct FlirOneImageDefaultTypeInternal {
  constexpr FlirOneImageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlirOneImageDefaultTypeInternal() {}
  union {
    FlirOneImage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlirOneImageDefaultTypeInternal _FlirOneImage_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_interfaces_2fflirone_5fimage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_interfaces_2fflirone_5fimage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_interfaces_2fflirone_5fimage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_interfaces_2fflirone_5fimage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FlirOneImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FlirOneImage, uuid_),
  PROTOBUF_FIELD_OFFSET(::FlirOneImage, measured_timestamp_ns_),
  PROTOBUF_FIELD_OFFSET(::FlirOneImage, sent_timestamp_ns_),
  PROTOBUF_FIELD_OFFSET(::FlirOneImage, camera_sequence_),
  PROTOBUF_FIELD_OFFSET(::FlirOneImage, machine_id_),
  PROTOBUF_FIELD_OFFSET(::FlirOneImage, rgb_image_),
  PROTOBUF_FIELD_OFFSET(::FlirOneImage, thermal_image_),
  PROTOBUF_FIELD_OFFSET(::FlirOneImage, msg_sequence_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::FlirOneImage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FlirOneImage_default_instance_),
};

const char descriptor_table_protodef_interfaces_2fflirone_5fimage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036interfaces/flirone_image.proto\032\027interf"
  "aces/common.proto\032\026interfaces/image.prot"
  "o\"\325\002\n\014FlirOneImage\022\022\n\004uuid\030\001 \001(\tR\004uuid\0222"
  "\n\025measured_timestamp_ns\030\002 \001(\003R\023measuredT"
  "imestampNs\022*\n\021sent_timestamp_ns\030\003 \001(\003R\017s"
  "entTimestampNs\022\'\n\017camera_sequence\030\004 \001(\rR"
  "\016cameraSequence\022\035\n\nmachine_id\030\005 \001(\tR\tmac"
  "hineId\0223\n\trgb_image\030\006 \001(\0132\026.image.Compre"
  "ssedImageR\010rgbImage\0221\n\rthermal_image\030\007 \001"
  "(\0132\014.image.ImageR\014thermalImage\022!\n\014msg_se"
  "quence\030\010 \001(\rR\013msgSequence2A\n\023FlirOneImag"
  "eService\022*\n\013SubmitImage\022\r.FlirOneImage\032\014"
  ".common.Voidb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_interfaces_2fflirone_5fimage_2eproto_deps[2] = {
  &::descriptor_table_interfaces_2fcommon_2eproto,
  &::descriptor_table_interfaces_2fimage_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_interfaces_2fflirone_5fimage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_interfaces_2fflirone_5fimage_2eproto = {
  false, false, 500, descriptor_table_protodef_interfaces_2fflirone_5fimage_2eproto, "interfaces/flirone_image.proto", 
  &descriptor_table_interfaces_2fflirone_5fimage_2eproto_once, descriptor_table_interfaces_2fflirone_5fimage_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_interfaces_2fflirone_5fimage_2eproto::offsets,
  file_level_metadata_interfaces_2fflirone_5fimage_2eproto, file_level_enum_descriptors_interfaces_2fflirone_5fimage_2eproto, file_level_service_descriptors_interfaces_2fflirone_5fimage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_interfaces_2fflirone_5fimage_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_interfaces_2fflirone_5fimage_2eproto);
  return descriptor_table_interfaces_2fflirone_5fimage_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_interfaces_2fflirone_5fimage_2eproto(&descriptor_table_interfaces_2fflirone_5fimage_2eproto);

// ===================================================================

class FlirOneImage::_Internal {
 public:
  static const ::image::CompressedImage& rgb_image(const FlirOneImage* msg);
  static const ::image::Image& thermal_image(const FlirOneImage* msg);
};

const ::image::CompressedImage&
FlirOneImage::_Internal::rgb_image(const FlirOneImage* msg) {
  return *msg->rgb_image_;
}
const ::image::Image&
FlirOneImage::_Internal::thermal_image(const FlirOneImage* msg) {
  return *msg->thermal_image_;
}
void FlirOneImage::clear_rgb_image() {
  if (GetArena() == nullptr && rgb_image_ != nullptr) {
    delete rgb_image_;
  }
  rgb_image_ = nullptr;
}
void FlirOneImage::clear_thermal_image() {
  if (GetArena() == nullptr && thermal_image_ != nullptr) {
    delete thermal_image_;
  }
  thermal_image_ = nullptr;
}
FlirOneImage::FlirOneImage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FlirOneImage)
}
FlirOneImage::FlirOneImage(const FlirOneImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uuid(), 
      GetArena());
  }
  machine_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_machine_id().empty()) {
    machine_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_machine_id(), 
      GetArena());
  }
  if (from._internal_has_rgb_image()) {
    rgb_image_ = new ::image::CompressedImage(*from.rgb_image_);
  } else {
    rgb_image_ = nullptr;
  }
  if (from._internal_has_thermal_image()) {
    thermal_image_ = new ::image::Image(*from.thermal_image_);
  } else {
    thermal_image_ = nullptr;
  }
  ::memcpy(&measured_timestamp_ns_, &from.measured_timestamp_ns_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_sequence_) -
    reinterpret_cast<char*>(&measured_timestamp_ns_)) + sizeof(msg_sequence_));
  // @@protoc_insertion_point(copy_constructor:FlirOneImage)
}

void FlirOneImage::SharedCtor() {
uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
machine_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rgb_image_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg_sequence_) -
    reinterpret_cast<char*>(&rgb_image_)) + sizeof(msg_sequence_));
}

FlirOneImage::~FlirOneImage() {
  // @@protoc_insertion_point(destructor:FlirOneImage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlirOneImage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  machine_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rgb_image_;
  if (this != internal_default_instance()) delete thermal_image_;
}

void FlirOneImage::ArenaDtor(void* object) {
  FlirOneImage* _this = reinterpret_cast< FlirOneImage* >(object);
  (void)_this;
}
void FlirOneImage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlirOneImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlirOneImage::Clear() {
// @@protoc_insertion_point(message_clear_start:FlirOneImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmpty();
  machine_id_.ClearToEmpty();
  if (GetArena() == nullptr && rgb_image_ != nullptr) {
    delete rgb_image_;
  }
  rgb_image_ = nullptr;
  if (GetArena() == nullptr && thermal_image_ != nullptr) {
    delete thermal_image_;
  }
  thermal_image_ = nullptr;
  ::memset(&measured_timestamp_ns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_sequence_) -
      reinterpret_cast<char*>(&measured_timestamp_ns_)) + sizeof(msg_sequence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlirOneImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uuid = 1 [json_name = "uuid"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FlirOneImage.uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 measured_timestamp_ns = 2 [json_name = "measuredTimestampNs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          measured_timestamp_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sent_timestamp_ns = 3 [json_name = "sentTimestampNs"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sent_timestamp_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 camera_sequence = 4 [json_name = "cameraSequence"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          camera_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string machine_id = 5 [json_name = "machineId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_machine_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FlirOneImage.machine_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .image.CompressedImage rgb_image = 6 [json_name = "rgbImage"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_rgb_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .image.Image thermal_image = 7 [json_name = "thermalImage"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_thermal_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 msg_sequence = 8 [json_name = "msgSequence"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          msg_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlirOneImage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FlirOneImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1 [json_name = "uuid"];
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FlirOneImage.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // int64 measured_timestamp_ns = 2 [json_name = "measuredTimestampNs"];
  if (this->measured_timestamp_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_measured_timestamp_ns(), target);
  }

  // int64 sent_timestamp_ns = 3 [json_name = "sentTimestampNs"];
  if (this->sent_timestamp_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_sent_timestamp_ns(), target);
  }

  // uint32 camera_sequence = 4 [json_name = "cameraSequence"];
  if (this->camera_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_camera_sequence(), target);
  }

  // string machine_id = 5 [json_name = "machineId"];
  if (this->machine_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_machine_id().data(), static_cast<int>(this->_internal_machine_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FlirOneImage.machine_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_machine_id(), target);
  }

  // .image.CompressedImage rgb_image = 6 [json_name = "rgbImage"];
  if (this->has_rgb_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::rgb_image(this), target, stream);
  }

  // .image.Image thermal_image = 7 [json_name = "thermalImage"];
  if (this->has_thermal_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::thermal_image(this), target, stream);
  }

  // uint32 msg_sequence = 8 [json_name = "msgSequence"];
  if (this->msg_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_msg_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FlirOneImage)
  return target;
}

size_t FlirOneImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FlirOneImage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1 [json_name = "uuid"];
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string machine_id = 5 [json_name = "machineId"];
  if (this->machine_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_machine_id());
  }

  // .image.CompressedImage rgb_image = 6 [json_name = "rgbImage"];
  if (this->has_rgb_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rgb_image_);
  }

  // .image.Image thermal_image = 7 [json_name = "thermalImage"];
  if (this->has_thermal_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *thermal_image_);
  }

  // int64 measured_timestamp_ns = 2 [json_name = "measuredTimestampNs"];
  if (this->measured_timestamp_ns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_measured_timestamp_ns());
  }

  // int64 sent_timestamp_ns = 3 [json_name = "sentTimestampNs"];
  if (this->sent_timestamp_ns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sent_timestamp_ns());
  }

  // uint32 camera_sequence = 4 [json_name = "cameraSequence"];
  if (this->camera_sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_camera_sequence());
  }

  // uint32 msg_sequence = 8 [json_name = "msgSequence"];
  if (this->msg_sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_msg_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlirOneImage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FlirOneImage)
  GOOGLE_DCHECK_NE(&from, this);
  const FlirOneImage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlirOneImage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FlirOneImage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FlirOneImage)
    MergeFrom(*source);
  }
}

void FlirOneImage::MergeFrom(const FlirOneImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FlirOneImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from.machine_id().size() > 0) {
    _internal_set_machine_id(from._internal_machine_id());
  }
  if (from.has_rgb_image()) {
    _internal_mutable_rgb_image()->::image::CompressedImage::MergeFrom(from._internal_rgb_image());
  }
  if (from.has_thermal_image()) {
    _internal_mutable_thermal_image()->::image::Image::MergeFrom(from._internal_thermal_image());
  }
  if (from.measured_timestamp_ns() != 0) {
    _internal_set_measured_timestamp_ns(from._internal_measured_timestamp_ns());
  }
  if (from.sent_timestamp_ns() != 0) {
    _internal_set_sent_timestamp_ns(from._internal_sent_timestamp_ns());
  }
  if (from.camera_sequence() != 0) {
    _internal_set_camera_sequence(from._internal_camera_sequence());
  }
  if (from.msg_sequence() != 0) {
    _internal_set_msg_sequence(from._internal_msg_sequence());
  }
}

void FlirOneImage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FlirOneImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlirOneImage::CopyFrom(const FlirOneImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FlirOneImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlirOneImage::IsInitialized() const {
  return true;
}

void FlirOneImage::InternalSwap(FlirOneImage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  machine_id_.Swap(&other->machine_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlirOneImage, msg_sequence_)
      + sizeof(FlirOneImage::msg_sequence_)
      - PROTOBUF_FIELD_OFFSET(FlirOneImage, rgb_image_)>(
          reinterpret_cast<char*>(&rgb_image_),
          reinterpret_cast<char*>(&other->rgb_image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlirOneImage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FlirOneImage* Arena::CreateMaybeMessage< ::FlirOneImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FlirOneImage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
