// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interfaces/value_vector.proto

#include "interfaces/value_vector.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace common {
constexpr ValueVector::ValueVector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : int32_vector_()
  , _int32_vector_cached_byte_size_()
  , int64_vector_()
  , _int64_vector_cached_byte_size_()
  , float_vector_()
  , _float_vector_cached_byte_size_()
  , double_vector_()
  , _double_vector_cached_byte_size_()
  , sequence_(PROTOBUF_LONGLONG(0))
  , sent_timestamp_ns_(PROTOBUF_LONGLONG(0)){}
struct ValueVectorDefaultTypeInternal {
  constexpr ValueVectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValueVectorDefaultTypeInternal() {}
  union {
    ValueVector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValueVectorDefaultTypeInternal _ValueVector_default_instance_;
}  // namespace common
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_interfaces_2fvalue_5fvector_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_interfaces_2fvalue_5fvector_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_interfaces_2fvalue_5fvector_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_interfaces_2fvalue_5fvector_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ValueVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::ValueVector, sequence_),
  PROTOBUF_FIELD_OFFSET(::common::ValueVector, sent_timestamp_ns_),
  PROTOBUF_FIELD_OFFSET(::common::ValueVector, int32_vector_),
  PROTOBUF_FIELD_OFFSET(::common::ValueVector, int64_vector_),
  PROTOBUF_FIELD_OFFSET(::common::ValueVector, float_vector_),
  PROTOBUF_FIELD_OFFSET(::common::ValueVector, double_vector_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::common::ValueVector)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_ValueVector_default_instance_),
};

const char descriptor_table_protodef_interfaces_2fvalue_5fvector_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035interfaces/value_vector.proto\022\006common\""
  "\343\001\n\013ValueVector\022\032\n\010sequence\030\001 \001(\003R\010seque"
  "nce\022*\n\021sent_timestamp_ns\030\002 \001(\003R\017sentTime"
  "stampNs\022!\n\014int32_vector\030\003 \003(\005R\013int32Vect"
  "or\022!\n\014int64_vector\030\004 \003(\003R\013int64Vector\022!\n"
  "\014float_vector\030\005 \003(\002R\013floatVector\022#\n\rdoub"
  "le_vector\030\006 \003(\001R\014doubleVectorb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_interfaces_2fvalue_5fvector_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_interfaces_2fvalue_5fvector_2eproto = {
  false, false, 277, descriptor_table_protodef_interfaces_2fvalue_5fvector_2eproto, "interfaces/value_vector.proto", 
  &descriptor_table_interfaces_2fvalue_5fvector_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_interfaces_2fvalue_5fvector_2eproto::offsets,
  file_level_metadata_interfaces_2fvalue_5fvector_2eproto, file_level_enum_descriptors_interfaces_2fvalue_5fvector_2eproto, file_level_service_descriptors_interfaces_2fvalue_5fvector_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_interfaces_2fvalue_5fvector_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_interfaces_2fvalue_5fvector_2eproto);
  return descriptor_table_interfaces_2fvalue_5fvector_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_interfaces_2fvalue_5fvector_2eproto(&descriptor_table_interfaces_2fvalue_5fvector_2eproto);
namespace common {

// ===================================================================

class ValueVector::_Internal {
 public:
};

ValueVector::ValueVector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  int32_vector_(arena),
  int64_vector_(arena),
  float_vector_(arena),
  double_vector_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.ValueVector)
}
ValueVector::ValueVector(const ValueVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      int32_vector_(from.int32_vector_),
      int64_vector_(from.int64_vector_),
      float_vector_(from.float_vector_),
      double_vector_(from.double_vector_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sequence_, &from.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&sent_timestamp_ns_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(sent_timestamp_ns_));
  // @@protoc_insertion_point(copy_constructor:common.ValueVector)
}

void ValueVector::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sequence_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sent_timestamp_ns_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(sent_timestamp_ns_));
}

ValueVector::~ValueVector() {
  // @@protoc_insertion_point(destructor:common.ValueVector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValueVector::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ValueVector::ArenaDtor(void* object) {
  ValueVector* _this = reinterpret_cast< ValueVector* >(object);
  (void)_this;
}
void ValueVector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValueVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValueVector::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ValueVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int32_vector_.Clear();
  int64_vector_.Clear();
  float_vector_.Clear();
  double_vector_.Clear();
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sent_timestamp_ns_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(sent_timestamp_ns_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValueVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 sequence = 1 [json_name = "sequence"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sent_timestamp_ns = 2 [json_name = "sentTimestampNs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sent_timestamp_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 int32_vector = 3 [json_name = "int32Vector"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int32_vector(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_int32_vector(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 int64_vector = 4 [json_name = "int64Vector"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_int64_vector(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_int64_vector(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float float_vector = 5 [json_name = "floatVector"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_float_vector(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_float_vector(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated double double_vector = 6 [json_name = "doubleVector"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_double_vector(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49) {
          _internal_add_double_vector(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValueVector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ValueVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sequence = 1 [json_name = "sequence"];
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_sequence(), target);
  }

  // int64 sent_timestamp_ns = 2 [json_name = "sentTimestampNs"];
  if (this->sent_timestamp_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_sent_timestamp_ns(), target);
  }

  // repeated int32 int32_vector = 3 [json_name = "int32Vector"];
  {
    int byte_size = _int32_vector_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_int32_vector(), byte_size, target);
    }
  }

  // repeated int64 int64_vector = 4 [json_name = "int64Vector"];
  {
    int byte_size = _int64_vector_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_int64_vector(), byte_size, target);
    }
  }

  // repeated float float_vector = 5 [json_name = "floatVector"];
  if (this->_internal_float_vector_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_float_vector(), target);
  }

  // repeated double double_vector = 6 [json_name = "doubleVector"];
  if (this->_internal_double_vector_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_double_vector(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ValueVector)
  return target;
}

size_t ValueVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ValueVector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 int32_vector = 3 [json_name = "int32Vector"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->int32_vector_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int32_vector_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 int64_vector = 4 [json_name = "int64Vector"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->int64_vector_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int64_vector_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float float_vector = 5 [json_name = "floatVector"];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_float_vector_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _float_vector_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double double_vector = 6 [json_name = "doubleVector"];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_double_vector_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _double_vector_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 sequence = 1 [json_name = "sequence"];
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sequence());
  }

  // int64 sent_timestamp_ns = 2 [json_name = "sentTimestampNs"];
  if (this->sent_timestamp_ns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sent_timestamp_ns());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValueVector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.ValueVector)
  GOOGLE_DCHECK_NE(&from, this);
  const ValueVector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValueVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.ValueVector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.ValueVector)
    MergeFrom(*source);
  }
}

void ValueVector::MergeFrom(const ValueVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ValueVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  int32_vector_.MergeFrom(from.int32_vector_);
  int64_vector_.MergeFrom(from.int64_vector_);
  float_vector_.MergeFrom(from.float_vector_);
  double_vector_.MergeFrom(from.double_vector_);
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from.sent_timestamp_ns() != 0) {
    _internal_set_sent_timestamp_ns(from._internal_sent_timestamp_ns());
  }
}

void ValueVector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.ValueVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueVector::CopyFrom(const ValueVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ValueVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueVector::IsInitialized() const {
  return true;
}

void ValueVector::InternalSwap(ValueVector* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  int32_vector_.InternalSwap(&other->int32_vector_);
  int64_vector_.InternalSwap(&other->int64_vector_);
  float_vector_.InternalSwap(&other->float_vector_);
  double_vector_.InternalSwap(&other->double_vector_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValueVector, sent_timestamp_ns_)
      + sizeof(ValueVector::sent_timestamp_ns_)
      - PROTOBUF_FIELD_OFFSET(ValueVector, sequence_)>(
          reinterpret_cast<char*>(&sequence_),
          reinterpret_cast<char*>(&other->sequence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValueVector::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::common::ValueVector* Arena::CreateMaybeMessage< ::common::ValueVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ValueVector >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
