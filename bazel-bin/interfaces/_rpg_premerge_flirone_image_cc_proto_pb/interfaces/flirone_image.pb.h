// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interfaces/flirone_image.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_interfaces_2fflirone_5fimage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_interfaces_2fflirone_5fimage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "interfaces/common.pb.h"
#include "interfaces/image.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_interfaces_2fflirone_5fimage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_interfaces_2fflirone_5fimage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_interfaces_2fflirone_5fimage_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_interfaces_2fflirone_5fimage_2eproto_metadata_getter(int index);
class FlirOneImage;
struct FlirOneImageDefaultTypeInternal;
extern FlirOneImageDefaultTypeInternal _FlirOneImage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FlirOneImage* Arena::CreateMaybeMessage<::FlirOneImage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class FlirOneImage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FlirOneImage) */ {
 public:
  inline FlirOneImage() : FlirOneImage(nullptr) {}
  virtual ~FlirOneImage();
  explicit constexpr FlirOneImage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlirOneImage(const FlirOneImage& from);
  FlirOneImage(FlirOneImage&& from) noexcept
    : FlirOneImage() {
    *this = ::std::move(from);
  }

  inline FlirOneImage& operator=(const FlirOneImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlirOneImage& operator=(FlirOneImage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlirOneImage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlirOneImage* internal_default_instance() {
    return reinterpret_cast<const FlirOneImage*>(
               &_FlirOneImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FlirOneImage& a, FlirOneImage& b) {
    a.Swap(&b);
  }
  inline void Swap(FlirOneImage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlirOneImage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlirOneImage* New() const final {
    return CreateMaybeMessage<FlirOneImage>(nullptr);
  }

  FlirOneImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlirOneImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlirOneImage& from);
  void MergeFrom(const FlirOneImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlirOneImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FlirOneImage";
  }
  protected:
  explicit FlirOneImage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_interfaces_2fflirone_5fimage_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kMachineIdFieldNumber = 5,
    kRgbImageFieldNumber = 6,
    kThermalImageFieldNumber = 7,
    kMeasuredTimestampNsFieldNumber = 2,
    kSentTimestampNsFieldNumber = 3,
    kCameraSequenceFieldNumber = 4,
    kMsgSequenceFieldNumber = 8,
  };
  // string uuid = 1 [json_name = "uuid"];
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string machine_id = 5 [json_name = "machineId"];
  void clear_machine_id();
  const std::string& machine_id() const;
  void set_machine_id(const std::string& value);
  void set_machine_id(std::string&& value);
  void set_machine_id(const char* value);
  void set_machine_id(const char* value, size_t size);
  std::string* mutable_machine_id();
  std::string* release_machine_id();
  void set_allocated_machine_id(std::string* machine_id);
  private:
  const std::string& _internal_machine_id() const;
  void _internal_set_machine_id(const std::string& value);
  std::string* _internal_mutable_machine_id();
  public:

  // .image.CompressedImage rgb_image = 6 [json_name = "rgbImage"];
  bool has_rgb_image() const;
  private:
  bool _internal_has_rgb_image() const;
  public:
  void clear_rgb_image();
  const ::image::CompressedImage& rgb_image() const;
  ::image::CompressedImage* release_rgb_image();
  ::image::CompressedImage* mutable_rgb_image();
  void set_allocated_rgb_image(::image::CompressedImage* rgb_image);
  private:
  const ::image::CompressedImage& _internal_rgb_image() const;
  ::image::CompressedImage* _internal_mutable_rgb_image();
  public:
  void unsafe_arena_set_allocated_rgb_image(
      ::image::CompressedImage* rgb_image);
  ::image::CompressedImage* unsafe_arena_release_rgb_image();

  // .image.Image thermal_image = 7 [json_name = "thermalImage"];
  bool has_thermal_image() const;
  private:
  bool _internal_has_thermal_image() const;
  public:
  void clear_thermal_image();
  const ::image::Image& thermal_image() const;
  ::image::Image* release_thermal_image();
  ::image::Image* mutable_thermal_image();
  void set_allocated_thermal_image(::image::Image* thermal_image);
  private:
  const ::image::Image& _internal_thermal_image() const;
  ::image::Image* _internal_mutable_thermal_image();
  public:
  void unsafe_arena_set_allocated_thermal_image(
      ::image::Image* thermal_image);
  ::image::Image* unsafe_arena_release_thermal_image();

  // int64 measured_timestamp_ns = 2 [json_name = "measuredTimestampNs"];
  void clear_measured_timestamp_ns();
  ::PROTOBUF_NAMESPACE_ID::int64 measured_timestamp_ns() const;
  void set_measured_timestamp_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_measured_timestamp_ns() const;
  void _internal_set_measured_timestamp_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 sent_timestamp_ns = 3 [json_name = "sentTimestampNs"];
  void clear_sent_timestamp_ns();
  ::PROTOBUF_NAMESPACE_ID::int64 sent_timestamp_ns() const;
  void set_sent_timestamp_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sent_timestamp_ns() const;
  void _internal_set_sent_timestamp_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 camera_sequence = 4 [json_name = "cameraSequence"];
  void clear_camera_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 camera_sequence() const;
  void set_camera_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_camera_sequence() const;
  void _internal_set_camera_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 msg_sequence = 8 [json_name = "msgSequence"];
  void clear_msg_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_sequence() const;
  void set_msg_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_sequence() const;
  void _internal_set_msg_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:FlirOneImage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machine_id_;
  ::image::CompressedImage* rgb_image_;
  ::image::Image* thermal_image_;
  ::PROTOBUF_NAMESPACE_ID::int64 measured_timestamp_ns_;
  ::PROTOBUF_NAMESPACE_ID::int64 sent_timestamp_ns_;
  ::PROTOBUF_NAMESPACE_ID::uint32 camera_sequence_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interfaces_2fflirone_5fimage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FlirOneImage

// string uuid = 1 [json_name = "uuid"];
inline void FlirOneImage::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& FlirOneImage::uuid() const {
  // @@protoc_insertion_point(field_get:FlirOneImage.uuid)
  return _internal_uuid();
}
inline void FlirOneImage::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:FlirOneImage.uuid)
}
inline std::string* FlirOneImage::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:FlirOneImage.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& FlirOneImage::_internal_uuid() const {
  return uuid_.Get();
}
inline void FlirOneImage::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FlirOneImage::set_uuid(std::string&& value) {
  
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FlirOneImage.uuid)
}
inline void FlirOneImage::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FlirOneImage.uuid)
}
inline void FlirOneImage::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FlirOneImage.uuid)
}
inline std::string* FlirOneImage::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FlirOneImage::release_uuid() {
  // @@protoc_insertion_point(field_release:FlirOneImage.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FlirOneImage::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FlirOneImage.uuid)
}

// int64 measured_timestamp_ns = 2 [json_name = "measuredTimestampNs"];
inline void FlirOneImage::clear_measured_timestamp_ns() {
  measured_timestamp_ns_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FlirOneImage::_internal_measured_timestamp_ns() const {
  return measured_timestamp_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FlirOneImage::measured_timestamp_ns() const {
  // @@protoc_insertion_point(field_get:FlirOneImage.measured_timestamp_ns)
  return _internal_measured_timestamp_ns();
}
inline void FlirOneImage::_internal_set_measured_timestamp_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  measured_timestamp_ns_ = value;
}
inline void FlirOneImage::set_measured_timestamp_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_measured_timestamp_ns(value);
  // @@protoc_insertion_point(field_set:FlirOneImage.measured_timestamp_ns)
}

// int64 sent_timestamp_ns = 3 [json_name = "sentTimestampNs"];
inline void FlirOneImage::clear_sent_timestamp_ns() {
  sent_timestamp_ns_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FlirOneImage::_internal_sent_timestamp_ns() const {
  return sent_timestamp_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FlirOneImage::sent_timestamp_ns() const {
  // @@protoc_insertion_point(field_get:FlirOneImage.sent_timestamp_ns)
  return _internal_sent_timestamp_ns();
}
inline void FlirOneImage::_internal_set_sent_timestamp_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sent_timestamp_ns_ = value;
}
inline void FlirOneImage::set_sent_timestamp_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sent_timestamp_ns(value);
  // @@protoc_insertion_point(field_set:FlirOneImage.sent_timestamp_ns)
}

// uint32 camera_sequence = 4 [json_name = "cameraSequence"];
inline void FlirOneImage::clear_camera_sequence() {
  camera_sequence_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlirOneImage::_internal_camera_sequence() const {
  return camera_sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlirOneImage::camera_sequence() const {
  // @@protoc_insertion_point(field_get:FlirOneImage.camera_sequence)
  return _internal_camera_sequence();
}
inline void FlirOneImage::_internal_set_camera_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  camera_sequence_ = value;
}
inline void FlirOneImage::set_camera_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_camera_sequence(value);
  // @@protoc_insertion_point(field_set:FlirOneImage.camera_sequence)
}

// string machine_id = 5 [json_name = "machineId"];
inline void FlirOneImage::clear_machine_id() {
  machine_id_.ClearToEmpty();
}
inline const std::string& FlirOneImage::machine_id() const {
  // @@protoc_insertion_point(field_get:FlirOneImage.machine_id)
  return _internal_machine_id();
}
inline void FlirOneImage::set_machine_id(const std::string& value) {
  _internal_set_machine_id(value);
  // @@protoc_insertion_point(field_set:FlirOneImage.machine_id)
}
inline std::string* FlirOneImage::mutable_machine_id() {
  // @@protoc_insertion_point(field_mutable:FlirOneImage.machine_id)
  return _internal_mutable_machine_id();
}
inline const std::string& FlirOneImage::_internal_machine_id() const {
  return machine_id_.Get();
}
inline void FlirOneImage::_internal_set_machine_id(const std::string& value) {
  
  machine_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FlirOneImage::set_machine_id(std::string&& value) {
  
  machine_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FlirOneImage.machine_id)
}
inline void FlirOneImage::set_machine_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  machine_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FlirOneImage.machine_id)
}
inline void FlirOneImage::set_machine_id(const char* value,
    size_t size) {
  
  machine_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FlirOneImage.machine_id)
}
inline std::string* FlirOneImage::_internal_mutable_machine_id() {
  
  return machine_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FlirOneImage::release_machine_id() {
  // @@protoc_insertion_point(field_release:FlirOneImage.machine_id)
  return machine_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FlirOneImage::set_allocated_machine_id(std::string* machine_id) {
  if (machine_id != nullptr) {
    
  } else {
    
  }
  machine_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), machine_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FlirOneImage.machine_id)
}

// .image.CompressedImage rgb_image = 6 [json_name = "rgbImage"];
inline bool FlirOneImage::_internal_has_rgb_image() const {
  return this != internal_default_instance() && rgb_image_ != nullptr;
}
inline bool FlirOneImage::has_rgb_image() const {
  return _internal_has_rgb_image();
}
inline const ::image::CompressedImage& FlirOneImage::_internal_rgb_image() const {
  const ::image::CompressedImage* p = rgb_image_;
  return p != nullptr ? *p : reinterpret_cast<const ::image::CompressedImage&>(
      ::image::_CompressedImage_default_instance_);
}
inline const ::image::CompressedImage& FlirOneImage::rgb_image() const {
  // @@protoc_insertion_point(field_get:FlirOneImage.rgb_image)
  return _internal_rgb_image();
}
inline void FlirOneImage::unsafe_arena_set_allocated_rgb_image(
    ::image::CompressedImage* rgb_image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rgb_image_);
  }
  rgb_image_ = rgb_image;
  if (rgb_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FlirOneImage.rgb_image)
}
inline ::image::CompressedImage* FlirOneImage::release_rgb_image() {
  
  ::image::CompressedImage* temp = rgb_image_;
  rgb_image_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::image::CompressedImage* FlirOneImage::unsafe_arena_release_rgb_image() {
  // @@protoc_insertion_point(field_release:FlirOneImage.rgb_image)
  
  ::image::CompressedImage* temp = rgb_image_;
  rgb_image_ = nullptr;
  return temp;
}
inline ::image::CompressedImage* FlirOneImage::_internal_mutable_rgb_image() {
  
  if (rgb_image_ == nullptr) {
    auto* p = CreateMaybeMessage<::image::CompressedImage>(GetArena());
    rgb_image_ = p;
  }
  return rgb_image_;
}
inline ::image::CompressedImage* FlirOneImage::mutable_rgb_image() {
  // @@protoc_insertion_point(field_mutable:FlirOneImage.rgb_image)
  return _internal_mutable_rgb_image();
}
inline void FlirOneImage::set_allocated_rgb_image(::image::CompressedImage* rgb_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rgb_image_);
  }
  if (rgb_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rgb_image)->GetArena();
    if (message_arena != submessage_arena) {
      rgb_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rgb_image, submessage_arena);
    }
    
  } else {
    
  }
  rgb_image_ = rgb_image;
  // @@protoc_insertion_point(field_set_allocated:FlirOneImage.rgb_image)
}

// .image.Image thermal_image = 7 [json_name = "thermalImage"];
inline bool FlirOneImage::_internal_has_thermal_image() const {
  return this != internal_default_instance() && thermal_image_ != nullptr;
}
inline bool FlirOneImage::has_thermal_image() const {
  return _internal_has_thermal_image();
}
inline const ::image::Image& FlirOneImage::_internal_thermal_image() const {
  const ::image::Image* p = thermal_image_;
  return p != nullptr ? *p : reinterpret_cast<const ::image::Image&>(
      ::image::_Image_default_instance_);
}
inline const ::image::Image& FlirOneImage::thermal_image() const {
  // @@protoc_insertion_point(field_get:FlirOneImage.thermal_image)
  return _internal_thermal_image();
}
inline void FlirOneImage::unsafe_arena_set_allocated_thermal_image(
    ::image::Image* thermal_image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thermal_image_);
  }
  thermal_image_ = thermal_image;
  if (thermal_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FlirOneImage.thermal_image)
}
inline ::image::Image* FlirOneImage::release_thermal_image() {
  
  ::image::Image* temp = thermal_image_;
  thermal_image_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::image::Image* FlirOneImage::unsafe_arena_release_thermal_image() {
  // @@protoc_insertion_point(field_release:FlirOneImage.thermal_image)
  
  ::image::Image* temp = thermal_image_;
  thermal_image_ = nullptr;
  return temp;
}
inline ::image::Image* FlirOneImage::_internal_mutable_thermal_image() {
  
  if (thermal_image_ == nullptr) {
    auto* p = CreateMaybeMessage<::image::Image>(GetArena());
    thermal_image_ = p;
  }
  return thermal_image_;
}
inline ::image::Image* FlirOneImage::mutable_thermal_image() {
  // @@protoc_insertion_point(field_mutable:FlirOneImage.thermal_image)
  return _internal_mutable_thermal_image();
}
inline void FlirOneImage::set_allocated_thermal_image(::image::Image* thermal_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(thermal_image_);
  }
  if (thermal_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thermal_image)->GetArena();
    if (message_arena != submessage_arena) {
      thermal_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thermal_image, submessage_arena);
    }
    
  } else {
    
  }
  thermal_image_ = thermal_image;
  // @@protoc_insertion_point(field_set_allocated:FlirOneImage.thermal_image)
}

// uint32 msg_sequence = 8 [json_name = "msgSequence"];
inline void FlirOneImage::clear_msg_sequence() {
  msg_sequence_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlirOneImage::_internal_msg_sequence() const {
  return msg_sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlirOneImage::msg_sequence() const {
  // @@protoc_insertion_point(field_get:FlirOneImage.msg_sequence)
  return _internal_msg_sequence();
}
inline void FlirOneImage::_internal_set_msg_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_sequence_ = value;
}
inline void FlirOneImage::set_msg_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_sequence(value);
  // @@protoc_insertion_point(field_set:FlirOneImage.msg_sequence)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_interfaces_2fflirone_5fimage_2eproto
